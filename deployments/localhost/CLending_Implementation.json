{
  "address": "0x70e0bA845a1A0F2DA3359C97E0285013525FFC49",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CORE_TOKEN",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DAI",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "accruedInterest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "addCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "tokenCollateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountCollateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBorrow",
          "type": "uint256"
        }
      ],
      "name": "addCollateralAndBorrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "borrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_yearlyPercentInterest",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_loanDefaultThresholdPercent",
          "type": "uint256"
        }
      ],
      "name": "changeLoanTerms",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "collaterabilityOfToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "coreDAOTreasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "debtorSummary",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "timeLastBorrow",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountDAIBorrowed",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newCollaterability",
          "type": "uint256"
        }
      ],
      "name": "editTokenCollaterability",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_coreDAOTreasury",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_daoToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_yearlyPercentInterest",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_loanDefaultThresholdPercent",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "loanDefaultThresholdPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reclaimAllCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "repayLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "userCollateralValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "userTotalDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yearlyPercentInterest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x3b48641e01fd6d6b2ae4defc39f494614e4fb641c61a7fc2c4c087bcddd10c3b",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x70e0bA845a1A0F2DA3359C97E0285013525FFC49",
    "transactionIndex": 0,
    "gasUsed": "1420751",
    "logsBloom": "0x
    "blockHash": "0x1adbbd5e750dc942d0ed357c46371f3c40d1c1949015be1cc66d6ac84e29f3b0",
    "transactionHash": "0x3b48641e01fd6d6b2ae4defc39f494614e4fb641c61a7fc2c4c087bcddd10c3b",
    "logs": [],
    "blockNumber": 12613904,
    "cumulativeGasUsed": "1420751",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "343aaa9a976c765679cea9a8ef416a74",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CORE_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAI\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"accruedInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenCollateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBorrow\",\"type\":\"uint256\"}],\"name\":\"addCollateralAndBorrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_yearlyPercentInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_loanDefaultThresholdPercent\",\"type\":\"uint256\"}],\"name\":\"changeLoanTerms\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"collaterabilityOfToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coreDAOTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"debtorSummary\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timeLastBorrow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountDAIBorrowed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newCollaterability\",\"type\":\"uint256\"}],\"name\":\"editTokenCollaterability\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_coreDAOTreasury\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_daoToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_yearlyPercentInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_loanDefaultThresholdPercent\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loanDefaultThresholdPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reclaimAllCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"repayLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userCollateralValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userTotalDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yearlyPercentInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"CVault Finance\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"_____gap\":{\"details\":\"upfront storage allocation for further upgrades\"}},\"title\":\"Lending contract for CORE and CoreDAO\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CLending.sol\":\"CLending\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"contracts/CLending.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\r\\nimport \\\"./CLendingLibrary.sol\\\";\\r\\nimport \\\"./types/CLendingTypes.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Lending contract for CORE and CoreDAO\\r\\n * @author CVault Finance\\r\\n */\\r\\ncontract CLending is OwnableUpgradeable {\\r\\n    using CLendingLibrary for IERC20;\\r\\n\\r\\n    IERC20 public constant DAI = IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F);\\r\\n    IERC20 public constant CORE_TOKEN = IERC20(0x62359Ed7505Efc61FF1D56fEF82158CcaffA23D7);\\r\\n\\r\\n    mapping(address => DebtorSummary) public debtorSummary;\\r\\n    mapping(address => uint256) public collaterabilityOfToken;\\r\\n\\r\\n    address public coreDAOTreasury;\\r\\n    uint256 public yearlyPercentInterest;\\r\\n    uint256 public loanDefaultThresholdPercent;\\r\\n\\r\\n    /// @dev upfront storage allocation for further upgrades\\r\\n    uint256[52] private _____gap;\\r\\n\\r\\n    function initialize(\\r\\n        address _coreDAOTreasury,\\r\\n        IERC20 _daoToken,\\r\\n        uint256 _yearlyPercentInterest,\\r\\n        uint256 _loanDefaultThresholdPercent\\r\\n    ) public initializer {\\r\\n        __Ownable_init();\\r\\n\\r\\n        coreDAOTreasury = _coreDAOTreasury;\\r\\n        yearlyPercentInterest = _yearlyPercentInterest;\\r\\n        loanDefaultThresholdPercent = _loanDefaultThresholdPercent;\\r\\n\\r\\n        collaterabilityOfToken[address(CORE_TOKEN)] = 5500;\\r\\n        collaterabilityOfToken[address(_daoToken)] = 1;\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        revert(\\\"CLending: ETH_NOT_ACCEPTED\\\");\\r\\n    }\\r\\n\\r\\n    // It should be noted that this will change everything backwards in time meaning some people might be liquidated right away\\r\\n    function changeLoanTerms(uint256 _yearlyPercentInterest, uint256 _loanDefaultThresholdPercent) public onlyOwner {\\r\\n        yearlyPercentInterest = _yearlyPercentInterest;\\r\\n        loanDefaultThresholdPercent = _loanDefaultThresholdPercent;\\r\\n    }\\r\\n\\r\\n    function editTokenCollaterability(address token, uint256 newCollaterability) public onlyOwner {\\r\\n        collaterabilityOfToken[token] = newCollaterability;\\r\\n    }\\r\\n\\r\\n    // Repays the loan supplying collateral and not adding it\\r\\n    function repayLoan(IERC20 token, uint256 amount) public {\\r\\n        DebtorSummary storage userSummaryStorage = debtorSummary[msg.sender];\\r\\n        (uint256 totalDebt, ) = liquidateDeliquent(msg.sender);\\r\\n        require(totalDebt > 0, \\\"CLending: NOT_DEBT\\\");\\r\\n\\r\\n        uint256 tokenCollateralAbility = collaterabilityOfToken[address(token)];\\r\\n        require(tokenCollateralAbility > 0, \\\"CLending: NOT_ACCEPTED\\\");\\r\\n\\r\\n        uint256 offeredCollateralValue = amount * tokenCollateralAbility;\\r\\n        uint256 _accruedInterest = accruedInterest(msg.sender);\\r\\n        require(offeredCollateralValue > _accruedInterest, \\\"CLending: INSUFFICIENT_AMOUNT\\\"); // Has to be done because we have to update debt time\\r\\n\\r\\n        // Note that acured interest is never bigger than 10% of supplied collateral because of liquidateDeliquent call above\\r\\n        if (offeredCollateralValue > totalDebt) {\\r\\n            amount = totalDebt / tokenCollateralAbility;\\r\\n            userSummaryStorage.amountDAIBorrowed = 0;\\r\\n        } else {\\r\\n            userSummaryStorage.amountDAIBorrowed =\\r\\n                userSummaryStorage.amountDAIBorrowed -\\r\\n                offeredCollateralValue -\\r\\n                _accruedInterest;\\r\\n            // Send the repayment amt\\r\\n            updateDebtTime(userSummaryStorage);\\r\\n        }\\r\\n\\r\\n        token.safeTransferFrom(msg.sender, amount);\\r\\n\\r\\n        // Send the accrued interest back to the DAO\\r\\n        token.transfer(coreDAOTreasury, _accruedInterest / tokenCollateralAbility);\\r\\n    }\\r\\n\\r\\n    function _supplyCollateral(\\r\\n        DebtorSummary storage userSummaryStorage,\\r\\n        address user,\\r\\n        IERC20 token,\\r\\n        uint256 amount\\r\\n    ) private {\\r\\n        liquidateDeliquent(user);\\r\\n\\r\\n        require(token != DAI, \\\"CLending: NOT_DAI\\\");\\r\\n\\r\\n        uint256 tokenCollateralAbility = collaterabilityOfToken[address(token)];\\r\\n        require(tokenCollateralAbility != 0, \\\"CLending: NOT_ACCEPTED\\\");\\r\\n\\r\\n        token.safeTransferFrom(user, amount);\\r\\n\\r\\n        // We pay interest already accrued with the same mechanism as repay fn\\r\\n        uint256 _accruedInterest = accruedInterest(user) / tokenCollateralAbility;\\r\\n\\r\\n        require(_accruedInterest <= amount, \\\"CLending: INSUFFICIENT_AMOUNT\\\");\\r\\n        amount = amount - _accruedInterest;\\r\\n\\r\\n        // We add collateral into the user struct\\r\\n        _addCollateral(userSummaryStorage, token, amount);\\r\\n    }\\r\\n\\r\\n    function addCollateral(IERC20 token, uint256 amount) public {\\r\\n        DebtorSummary storage userSummaryStorage = debtorSummary[msg.sender];\\r\\n        _supplyCollateral(userSummaryStorage, msg.sender, token, amount);\\r\\n        updateDebtTime(userSummaryStorage);\\r\\n    }\\r\\n\\r\\n    function addCollateralAndBorrow(\\r\\n        IERC20 tokenCollateral,\\r\\n        uint256 amountCollateral,\\r\\n        uint256 amountBorrow\\r\\n    ) public {\\r\\n        DebtorSummary storage userSummaryStorage = debtorSummary[msg.sender];\\r\\n        _supplyCollateral(userSummaryStorage, msg.sender, tokenCollateral, amountCollateral);\\r\\n        _borrow(userSummaryStorage, msg.sender, amountBorrow);\\r\\n    }\\r\\n\\r\\n    function borrow(uint256 amount) public {\\r\\n        DebtorSummary storage userSummaryStorage = debtorSummary[msg.sender];\\r\\n        _borrow(userSummaryStorage, msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    function _borrow(\\r\\n        DebtorSummary storage userSummaryStorage,\\r\\n        address user,\\r\\n        uint256 amountBorrow\\r\\n    ) private {\\r\\n        uint256 totalDebt = userTotalDebt(user); // This is with interest\\r\\n        uint256 totalCollateral = userCollateralValue(user);\\r\\n\\r\\n        require(totalDebt <= totalCollateral && !isLiquidable(totalDebt, totalCollateral), \\\"CLending: OVER_DEBTED\\\");\\r\\n\\r\\n        uint256 userRemainingCollateral = totalCollateral - totalDebt;\\r\\n        if (amountBorrow > userRemainingCollateral) {\\r\\n            uint256 totalBorrowed = totalDebt + amountBorrow;\\r\\n            require(totalBorrowed <= totalCollateral, \\\"CLending: TOO_MUCH_BORROWED\\\");\\r\\n            amountBorrow = totalCollateral - totalBorrowed;\\r\\n        }\\r\\n\\r\\n        editAmountBorrowed(userSummaryStorage, amountBorrow);\\r\\n        DAI.transfer(user, amountBorrow);\\r\\n    }\\r\\n\\r\\n    function _addCollateral(\\r\\n        DebtorSummary storage userSummaryStorage,\\r\\n        IERC20 token,\\r\\n        uint256 amount\\r\\n    ) private {\\r\\n        bool alreadySupplied;\\r\\n        // Loops over all provided collateral, checks if its there and if it is edit it\\r\\n        for (uint256 i = 0; i < userSummaryStorage.collateral.length; i++) {\\r\\n            if (userSummaryStorage.collateral[i].collateralAddress == address(token)) {\\r\\n                userSummaryStorage.collateral[i].suppliedCollateral =\\r\\n                    userSummaryStorage.collateral[i].suppliedCollateral +\\r\\n                    amount;\\r\\n                alreadySupplied = true;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // If it has not been already supplied we push it on\\r\\n        if (!alreadySupplied) {\\r\\n            userSummaryStorage.collateral.push(\\r\\n                Collateral({collateralAddress: address(token), suppliedCollateral: amount})\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function isLiquidable(uint256 totalDebt, uint256 totalCollateral) private view returns (bool) {\\r\\n        return (totalDebt * loanDefaultThresholdPercent) / 100 > totalCollateral;\\r\\n    }\\r\\n\\r\\n    // Liquidates people in default\\r\\n    function liquidateDeliquent(address user) private returns (uint256 totalDebt, uint256 totalCollateral) {\\r\\n        totalDebt = userTotalDebt(user); // This is with interest\\r\\n        totalCollateral = userCollateralValue(user);\\r\\n\\r\\n        if (isLiquidable(totalDebt, totalCollateral)) {\\r\\n            // user is in default, wipe their debt and collateral\\r\\n            delete debtorSummary[user];\\r\\n            return (0, 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function reclaimAllCollateral() public {\\r\\n        (uint256 totalDebt, uint256 totalCollateral) = liquidateDeliquent(msg.sender);\\r\\n\\r\\n        require(totalCollateral > 0, \\\"CLending: NOTHING_TO_CLAIM\\\");\\r\\n        require(totalDebt == 0, \\\"CLending: STILL_IN_DEBT\\\");\\r\\n\\r\\n        for (uint256 i = 0; i < debtorSummary[msg.sender].collateral.length; i++) {\\r\\n            uint256 supplied = debtorSummary[msg.sender].collateral[i].suppliedCollateral;\\r\\n            IERC20(debtorSummary[msg.sender].collateral[i].collateralAddress).transfer(msg.sender, supplied);\\r\\n        }\\r\\n\\r\\n        // User doesnt have collateral anymore and paid off debt, bye\\r\\n        delete debtorSummary[msg.sender];\\r\\n    }\\r\\n\\r\\n    function userCollateralValue(address user) public view returns (uint256 collateral) {\\r\\n        Collateral[] memory userCollateralTokens = debtorSummary[user].collateral;\\r\\n\\r\\n        for (uint256 i = 0; i < userCollateralTokens.length; i++) {\\r\\n            Collateral memory currentToken = userCollateralTokens[i];\\r\\n            uint256 tokenDebit = collaterabilityOfToken[currentToken.collateralAddress] *\\r\\n                currentToken.suppliedCollateral;\\r\\n            collateral = collateral + tokenDebit;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function userTotalDebt(address user) public view returns (uint256) {\\r\\n        return accruedInterest(user) + debtorSummary[user].amountDAIBorrowed;\\r\\n    }\\r\\n\\r\\n    function accruedInterest(address user) public view returns (uint256) {\\r\\n        DebtorSummary memory userSummaryMemory = debtorSummary[user];\\r\\n        uint256 timeSinceLastLoan = block.timestamp - userSummaryMemory.timeLastBorrow;\\r\\n        return (userSummaryMemory.amountDAIBorrowed * yearlyPercentInterest * timeSinceLastLoan) / 365 days; // 365days * 100\\r\\n    }\\r\\n\\r\\n    function editAmountBorrowed(DebtorSummary storage userSummaryStorage, uint256 addToBorrowed) private {\\r\\n        userSummaryStorage.amountDAIBorrowed = userSummaryStorage.amountDAIBorrowed + addToBorrowed;\\r\\n        updateDebtTime(userSummaryStorage);\\r\\n    }\\r\\n\\r\\n    function updateDebtTime(DebtorSummary storage userSummaryStorage) private {\\r\\n        userSummaryStorage.timeLastBorrow = block.timestamp;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xbeb76bfd336e9291b18ad1951c5eaf6e78abe9442a4394f70407fbc320410faf\",\"license\":\"UNLICENSED\"},\"contracts/CLendingLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title Library housing all the different function helpers that take space in the main contract\\n * @author CVault Finance\\n */\\nlibrary CLendingLibrary {\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address person,\\n        uint256 sendAmount\\n    ) internal returns (uint256 transferedAmount) {\\n        uint256 balanceBefore = token.balanceOf(address(this));\\n        token.transferFrom(person, address(this), sendAmount);\\n        uint256 balanceAfter = token.balanceOf(address(this));\\n\\n        transferedAmount = balanceAfter - balanceBefore;\\n        require(transferedAmount == sendAmount, \\\"CLending: UNSUPPORTED_TOKEN\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x6ba8921cfd25289750bfaae91aa7521a12f613cce66bf750f82b637900ab635a\",\"license\":\"UNLICENSED\"},\"contracts/types/CLendingTypes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nstruct DebtorSummary {\\n    uint256 timeLastBorrow; // simple timestamp\\n    uint256 amountDAIBorrowed; // denominated in DAI units (1e18)\\n    // Meaning 1 DAI = 1e18 here since DAI is 1e18\\n    Collateral[] collateral;\\n}\\n\\nstruct Collateral {\\n    address collateralAddress;\\n    uint256 suppliedCollateral;\\n}\\n\",\"keccak256\":\"0xb258d02a50f7f8725b62e7ad55e20dc19985158deaf7c6469fd1e53d280c6325\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "author": "CVault Finance",
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "_____gap": {
        "details": "upfront storage allocation for further upgrades"
      }
    },
    "title": "Lending contract for CORE and CoreDAO",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/CLending.sol:CLending",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/CLending.sol:CLending",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 213,
        "contract": "contracts/CLending.sol:CLending",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/CLending.sol:CLending",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/CLending.sol:CLending",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 7612,
        "contract": "contracts/CLending.sol:CLending",
        "label": "debtorSummary",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_address,t_struct(DebtorSummary)9035_storage)"
      },
      {
        "astId": 7616,
        "contract": "contracts/CLending.sol:CLending",
        "label": "collaterabilityOfToken",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7618,
        "contract": "contracts/CLending.sol:CLending",
        "label": "coreDAOTreasury",
        "offset": 0,
        "slot": "103",
        "type": "t_address"
      },
      {
        "astId": 7620,
        "contract": "contracts/CLending.sol:CLending",
        "label": "yearlyPercentInterest",
        "offset": 0,
        "slot": "104",
        "type": "t_uint256"
      },
      {
        "astId": 7622,
        "contract": "contracts/CLending.sol:CLending",
        "label": "loanDefaultThresholdPercent",
        "offset": 0,
        "slot": "105",
        "type": "t_uint256"
      },
      {
        "astId": 7627,
        "contract": "contracts/CLending.sol:CLending",
        "label": "_____gap",
        "offset": 0,
        "slot": "106",
        "type": "t_array(t_uint256)52_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Collateral)9040_storage)dyn_storage": {
        "base": "t_struct(Collateral)9040_storage",
        "encoding": "dynamic_array",
        "label": "struct Collateral[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)52_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[52]",
        "numberOfBytes": "1664"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(DebtorSummary)9035_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DebtorSummary)",
        "numberOfBytes": "32",
        "value": "t_struct(DebtorSummary)9035_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Collateral)9040_storage": {
        "encoding": "inplace",
        "label": "struct Collateral",
        "members": [
          {
            "astId": 9037,
            "contract": "contracts/CLending.sol:CLending",
            "label": "collateralAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 9039,
            "contract": "contracts/CLending.sol:CLending",
            "label": "suppliedCollateral",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(DebtorSummary)9035_storage": {
        "encoding": "inplace",
        "label": "struct DebtorSummary",
        "members": [
          {
            "astId": 9028,
            "contract": "contracts/CLending.sol:CLending",
            "label": "timeLastBorrow",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9030,
            "contract": "contracts/CLending.sol:CLending",
            "label": "amountDAIBorrowed",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9034,
            "contract": "contracts/CLending.sol:CLending",
            "label": "collateral",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_struct(Collateral)9040_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}