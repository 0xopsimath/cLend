{
  "address": "0x851356ae760d987E095750cCeb3bC6014560891C",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "toWho",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "whatToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "howMuch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "note",
          "type": "string"
        }
      ],
      "name": "Payment",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DAO_TOKENS_IN_LP1",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DAO_TOKENS_IN_LP2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DAO_TOKENS_IN_LP3",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LP1_VOUCHER",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LP2_VOUCHER",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LP3_VOUCHER",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "coreDAO",
      "outputs": [
        {
          "internalType": "contract ICOREDAO",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICOREDAO",
          "name": "_coreDAO",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "who",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "howManyTokens",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "note",
          "type": "string"
        }
      ],
      "name": "pay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrapVouchers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6df5fe15bb9764bbe39c9889c7acfb562e40287fec6c3d1cd67385dcee8af795",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x851356ae760d987E095750cCeb3bC6014560891C",
    "transactionIndex": 0,
    "gasUsed": "819133",
    "logsBloom": "0x
    "blockHash": "0x1604a3160f0e564c3171c6cef1b4f3e8c7d73addbd1304219a0e50b42a66c5a4",
    "transactionHash": "0x6df5fe15bb9764bbe39c9889c7acfb562e40287fec6c3d1cd67385dcee8af795",
    "logs": [],
    "blockNumber": 12613900,
    "cumulativeGasUsed": "819133",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "343aaa9a976c765679cea9a8ef416a74",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toWho\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"whatToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"howMuch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"note\",\"type\":\"string\"}],\"name\":\"Payment\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAO_TOKENS_IN_LP1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAO_TOKENS_IN_LP2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAO_TOKENS_IN_LP3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LP1_VOUCHER\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LP2_VOUCHER\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LP3_VOUCHER\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coreDAO\",\"outputs\":[{\"internalType\":\"contract ICOREDAO\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICOREDAO\",\"name\":\"_coreDAO\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"howManyTokens\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"note\",\"type\":\"string\"}],\"name\":\"pay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrapVouchers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"CVault Finance\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Protocol treasury contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CoreDAOTreasury.sol\":\"CoreDAOTreasury\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/CoreDAOTreasury.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ICOREDAO {\\n    function issue(address, uint256) external;\\n}\\n\\n/**\\n * @title Protocol treasury contract\\n * @author CVault Finance\\n */\\ncontract CoreDAOTreasury is OwnableUpgradeable {\\n    IERC20 public constant LP1_VOUCHER = IERC20(0xF6Dd68031a22c8A3F1e7a424cE8F43a1e1A3be3E);\\n    IERC20 public constant LP2_VOUCHER = IERC20(0xb8ee07B5ED2FF9dae6C504C9dEe84151F844a591);\\n    IERC20 public constant LP3_VOUCHER = IERC20(0xcA00F8eef4cE1F9183E06fA25fE7872fEDcf7456);\\n\\n    uint256 public constant DAO_TOKENS_IN_LP1 = 2250;\\n    uint256 public constant DAO_TOKENS_IN_LP2 = 9250e14;\\n    uint256 public constant DAO_TOKENS_IN_LP3 = 45;\\n\\n    ICOREDAO public coreDAO;\\n\\n    event Payment(address toWho, address whatToken, uint256 howMuch, string note);\\n\\n    function initialize(ICOREDAO _coreDAO) public initializer {\\n        __Ownable_init();\\n        coreDAO = _coreDAO;\\n    }\\n\\n    function pay(\\n        address payable who,\\n        uint256 howManyTokens,\\n        IERC20 token,\\n        string memory note\\n    ) public onlyOwner {\\n        if (token == IERC20(address(0))) {\\n            (bool ok, ) = who.call{value: howManyTokens}(\\\"\\\");\\n            require(ok, \\\"CLending: PAYMENT_FAILED\\\");\\n        } else {\\n            token.transfer(who, howManyTokens);\\n        }\\n\\n        emit Payment(who, address(token), howManyTokens, note);\\n    }\\n\\n    function wrapVouchers() public {\\n        uint256 balanceLP1User = LP1_VOUCHER.balanceOf(msg.sender);\\n        uint256 balanceLP2User = LP2_VOUCHER.balanceOf(msg.sender);\\n        uint256 balanceLP3User = LP3_VOUCHER.balanceOf(msg.sender);\\n        uint256 mintAmount;\\n\\n        if (balanceLP1User > 0) {\\n            LP1_VOUCHER.transferFrom(msg.sender, address(0), balanceLP1User);\\n            mintAmount = mintAmount + (balanceLP1User * DAO_TOKENS_IN_LP1);\\n        }\\n\\n        if (balanceLP2User > 0) {\\n            LP2_VOUCHER.transferFrom(msg.sender, address(0), balanceLP2User);\\n            mintAmount = mintAmount + (balanceLP2User * DAO_TOKENS_IN_LP2);\\n        }\\n\\n        if (balanceLP3User > 0) {\\n            LP3_VOUCHER.transferFrom(msg.sender, address(0), balanceLP3User);\\n            mintAmount = mintAmount + (balanceLP3User * DAO_TOKENS_IN_LP3);\\n        }\\n\\n        require(mintAmount > 0, \\\"CLending: NOTHING_TO_WRAP\\\");\\n\\n        coreDAO.issue(msg.sender, mintAmount);\\n    }\\n}\\n\",\"keccak256\":\"0x989cdacd1a9c38e4f4ae02e05f1ad66d3e7eb52c1e93c8824f2ae9c8955bf154\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610ddd806100206000396000f3fe608060405234801561001057600080fd5b50600436106100ce5760003560e01c8063b99461491161008c578063d559b08211610066578063d559b0821461019f578063e2605dad146101ba578063f2fde38b146101c3578063f96f48da146101d657600080fd5b8063b994614914610156578063c494e3c914610171578063c4d66de81461018c57600080fd5b80622531f8146100d35780631a681c0d146100f55780634f0447781461010a57806363cfdc6d14610135578063715018a61461013d5780638da5cb5b14610145575b600080fd5b6100e2670cd64299613c800081565b6040519081526020015b60405180910390f35b610108610103366004610b19565b6101de565b005b60655461011d906001600160a01b031681565b6040516001600160a01b0390911681526020016100ec565b6100e2602d81565b61010861038f565b6033546001600160a01b031661011d565b61011d73f6dd68031a22c8a3f1e7a424ce8f43a1e1a3be3e81565b61011d73b8ee07b5ed2ff9dae6c504c9dee84151f844a59181565b61010861019a366004610af5565b6103c5565b61011d73ca00f8eef4ce1f9183e06fa25fe7872fedcf745681565b6100e26108ca81565b6101086101d1366004610af5565b610455565b6101086104f0565b6033546001600160a01b031633146102115760405162461bcd60e51b815260040161020890610cfa565b60405180910390fd5b6001600160a01b0382166102c8576000846001600160a01b03168460405160006040518083038185875af1925050503d806000811461026c576040519150601f19603f3d011682016040523d82523d6000602084013e610271565b606091505b50509050806102c25760405162461bcd60e51b815260206004820152601860248201527f434c656e64696e673a205041594d454e545f4641494c454400000000000000006044820152606401610208565b5061034c565b60405163a9059cbb60e01b81526001600160a01b0385811660048301526024820185905283169063a9059cbb90604401602060405180830381600087803b15801561031257600080fd5b505af1158015610326573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034a9190610bf9565b505b7fd8b698ac671a4f14720b5e36de4daa40f05f109182b33b75e09276a122bb6532848385846040516103819493929190610c34565b60405180910390a150505050565b6033546001600160a01b031633146103b95760405162461bcd60e51b815260040161020890610cfa565b6103c3600061095e565b565b600054610100900460ff16806103de575060005460ff16155b6103fa5760405162461bcd60e51b815260040161020890610cac565b600054610100900460ff1615801561041c576000805461ffff19166101011790555b6104246109b0565b606580546001600160a01b0319166001600160a01b0384161790558015610451576000805461ff00191690555b5050565b6033546001600160a01b0316331461047f5760405162461bcd60e51b815260040161020890610cfa565b6001600160a01b0381166104e45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610208565b6104ed8161095e565b50565b6040516370a0823160e01b815233600482015260009073f6dd68031a22c8a3f1e7a424ce8f43a1e1a3be3e906370a082319060240160206040518083038186803b15801561053d57600080fd5b505afa158015610551573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105759190610c1b565b6040516370a0823160e01b815233600482015290915060009073b8ee07b5ed2ff9dae6c504c9dee84151f844a591906370a082319060240160206040518083038186803b1580156105c557600080fd5b505afa1580156105d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105fd9190610c1b565b6040516370a0823160e01b815233600482015290915060009073ca00f8eef4ce1f9183e06fa25fe7872fedcf7456906370a082319060240160206040518083038186803b15801561064d57600080fd5b505afa158015610661573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106859190610c1b565b90506000831561073b576040516323b872dd60e01b8152336004820152600060248201526044810185905273f6dd68031a22c8a3f1e7a424ce8f43a1e1a3be3e906323b872dd90606401602060405180830381600087803b1580156106e957600080fd5b505af11580156106fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107219190610bf9565b5061072e6108ca85610d47565b6107389082610d2f565b90505b82156107f3576040516323b872dd60e01b8152336004820152600060248201526044810184905273b8ee07b5ed2ff9dae6c504c9dee84151f844a591906323b872dd90606401602060405180830381600087803b15801561079b57600080fd5b505af11580156107af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d39190610bf9565b506107e6670cd64299613c800084610d47565b6107f09082610d2f565b90505b81156108a4576040516323b872dd60e01b8152336004820152600060248201526044810183905273ca00f8eef4ce1f9183e06fa25fe7872fedcf7456906323b872dd90606401602060405180830381600087803b15801561085357600080fd5b505af1158015610867573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088b9190610bf9565b50610897602d83610d47565b6108a19082610d2f565b90505b600081116108f45760405162461bcd60e51b815260206004820152601960248201527f434c656e64696e673a204e4f5448494e475f544f5f57524150000000000000006044820152606401610208565b60655460405163219e412d60e21b8152336004820152602481018390526001600160a01b039091169063867904b490604401600060405180830381600087803b15801561094057600080fd5b505af1158015610954573d6000803e3d6000fd5b5050505050505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16806109c9575060005460ff16155b6109e55760405162461bcd60e51b815260040161020890610cac565b600054610100900460ff16158015610a07576000805461ffff19166101011790555b610a0f610a2b565b610a17610a95565b80156104ed576000805461ff001916905550565b600054610100900460ff1680610a44575060005460ff16155b610a605760405162461bcd60e51b815260040161020890610cac565b600054610100900460ff16158015610a17576000805461ffff191661010117905580156104ed576000805461ff001916905550565b600054610100900460ff1680610aae575060005460ff16155b610aca5760405162461bcd60e51b815260040161020890610cac565b600054610100900460ff16158015610aec576000805461ffff19166101011790555b610a173361095e565b600060208284031215610b0757600080fd5b8135610b1281610d92565b9392505050565b60008060008060808587031215610b2f57600080fd5b8435610b3a81610d92565b9350602085013592506040850135610b5181610d92565b9150606085013567ffffffffffffffff80821115610b6e57600080fd5b818701915087601f830112610b8257600080fd5b813581811115610b9457610b94610d7c565b604051601f8201601f19908116603f01168101908382118183101715610bbc57610bbc610d7c565b816040528281528a6020848701011115610bd557600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b600060208284031215610c0b57600080fd5b81518015158114610b1257600080fd5b600060208284031215610c2d57600080fd5b5051919050565b600060018060a01b038087168352602081871681850152856040850152608060608501528451915081608085015260005b82811015610c815785810182015185820160a001528101610c65565b82811115610c9357600060a084870101525b5050601f01601f19169190910160a00195945050505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008219821115610d4257610d42610d66565b500190565b6000816000190483118215151615610d6157610d61610d66565b500290565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146104ed57600080fdfea26469706673582212203f2a6607a849c9316b147757a1463866ac6b69a8247451e85826945f3c18b26064736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ce5760003560e01c8063b99461491161008c578063d559b08211610066578063d559b0821461019f578063e2605dad146101ba578063f2fde38b146101c3578063f96f48da146101d657600080fd5b8063b994614914610156578063c494e3c914610171578063c4d66de81461018c57600080fd5b80622531f8146100d35780631a681c0d146100f55780634f0447781461010a57806363cfdc6d14610135578063715018a61461013d5780638da5cb5b14610145575b600080fd5b6100e2670cd64299613c800081565b6040519081526020015b60405180910390f35b610108610103366004610b19565b6101de565b005b60655461011d906001600160a01b031681565b6040516001600160a01b0390911681526020016100ec565b6100e2602d81565b61010861038f565b6033546001600160a01b031661011d565b61011d73f6dd68031a22c8a3f1e7a424ce8f43a1e1a3be3e81565b61011d73b8ee07b5ed2ff9dae6c504c9dee84151f844a59181565b61010861019a366004610af5565b6103c5565b61011d73ca00f8eef4ce1f9183e06fa25fe7872fedcf745681565b6100e26108ca81565b6101086101d1366004610af5565b610455565b6101086104f0565b6033546001600160a01b031633146102115760405162461bcd60e51b815260040161020890610cfa565b60405180910390fd5b6001600160a01b0382166102c8576000846001600160a01b03168460405160006040518083038185875af1925050503d806000811461026c576040519150601f19603f3d011682016040523d82523d6000602084013e610271565b606091505b50509050806102c25760405162461bcd60e51b815260206004820152601860248201527f434c656e64696e673a205041594d454e545f4641494c454400000000000000006044820152606401610208565b5061034c565b60405163a9059cbb60e01b81526001600160a01b0385811660048301526024820185905283169063a9059cbb90604401602060405180830381600087803b15801561031257600080fd5b505af1158015610326573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034a9190610bf9565b505b7fd8b698ac671a4f14720b5e36de4daa40f05f109182b33b75e09276a122bb6532848385846040516103819493929190610c34565b60405180910390a150505050565b6033546001600160a01b031633146103b95760405162461bcd60e51b815260040161020890610cfa565b6103c3600061095e565b565b600054610100900460ff16806103de575060005460ff16155b6103fa5760405162461bcd60e51b815260040161020890610cac565b600054610100900460ff1615801561041c576000805461ffff19166101011790555b6104246109b0565b606580546001600160a01b0319166001600160a01b0384161790558015610451576000805461ff00191690555b5050565b6033546001600160a01b0316331461047f5760405162461bcd60e51b815260040161020890610cfa565b6001600160a01b0381166104e45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610208565b6104ed8161095e565b50565b6040516370a0823160e01b815233600482015260009073f6dd68031a22c8a3f1e7a424ce8f43a1e1a3be3e906370a082319060240160206040518083038186803b15801561053d57600080fd5b505afa158015610551573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105759190610c1b565b6040516370a0823160e01b815233600482015290915060009073b8ee07b5ed2ff9dae6c504c9dee84151f844a591906370a082319060240160206040518083038186803b1580156105c557600080fd5b505afa1580156105d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105fd9190610c1b565b6040516370a0823160e01b815233600482015290915060009073ca00f8eef4ce1f9183e06fa25fe7872fedcf7456906370a082319060240160206040518083038186803b15801561064d57600080fd5b505afa158015610661573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106859190610c1b565b90506000831561073b576040516323b872dd60e01b8152336004820152600060248201526044810185905273f6dd68031a22c8a3f1e7a424ce8f43a1e1a3be3e906323b872dd90606401602060405180830381600087803b1580156106e957600080fd5b505af11580156106fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107219190610bf9565b5061072e6108ca85610d47565b6107389082610d2f565b90505b82156107f3576040516323b872dd60e01b8152336004820152600060248201526044810184905273b8ee07b5ed2ff9dae6c504c9dee84151f844a591906323b872dd90606401602060405180830381600087803b15801561079b57600080fd5b505af11580156107af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d39190610bf9565b506107e6670cd64299613c800084610d47565b6107f09082610d2f565b90505b81156108a4576040516323b872dd60e01b8152336004820152600060248201526044810183905273ca00f8eef4ce1f9183e06fa25fe7872fedcf7456906323b872dd90606401602060405180830381600087803b15801561085357600080fd5b505af1158015610867573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088b9190610bf9565b50610897602d83610d47565b6108a19082610d2f565b90505b600081116108f45760405162461bcd60e51b815260206004820152601960248201527f434c656e64696e673a204e4f5448494e475f544f5f57524150000000000000006044820152606401610208565b60655460405163219e412d60e21b8152336004820152602481018390526001600160a01b039091169063867904b490604401600060405180830381600087803b15801561094057600080fd5b505af1158015610954573d6000803e3d6000fd5b5050505050505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16806109c9575060005460ff16155b6109e55760405162461bcd60e51b815260040161020890610cac565b600054610100900460ff16158015610a07576000805461ffff19166101011790555b610a0f610a2b565b610a17610a95565b80156104ed576000805461ff001916905550565b600054610100900460ff1680610a44575060005460ff16155b610a605760405162461bcd60e51b815260040161020890610cac565b600054610100900460ff16158015610a17576000805461ffff191661010117905580156104ed576000805461ff001916905550565b600054610100900460ff1680610aae575060005460ff16155b610aca5760405162461bcd60e51b815260040161020890610cac565b600054610100900460ff16158015610aec576000805461ffff19166101011790555b610a173361095e565b600060208284031215610b0757600080fd5b8135610b1281610d92565b9392505050565b60008060008060808587031215610b2f57600080fd5b8435610b3a81610d92565b9350602085013592506040850135610b5181610d92565b9150606085013567ffffffffffffffff80821115610b6e57600080fd5b818701915087601f830112610b8257600080fd5b813581811115610b9457610b94610d7c565b604051601f8201601f19908116603f01168101908382118183101715610bbc57610bbc610d7c565b816040528281528a6020848701011115610bd557600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b600060208284031215610c0b57600080fd5b81518015158114610b1257600080fd5b600060208284031215610c2d57600080fd5b5051919050565b600060018060a01b038087168352602081871681850152856040850152608060608501528451915081608085015260005b82811015610c815785810182015185820160a001528101610c65565b82811115610c9357600060a084870101525b5050601f01601f19169190910160a00195945050505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008219821115610d4257610d42610d66565b500190565b6000816000190483118215151615610d6157610d61610d66565b500290565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146104ed57600080fdfea26469706673582212203f2a6607a849c9316b147757a1463866ac6b69a8247451e85826945f3c18b26064736f6c63430008060033",
  "devdoc": {
    "author": "CVault Finance",
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Protocol treasury contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/CoreDAOTreasury.sol:CoreDAOTreasury",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/CoreDAOTreasury.sol:CoreDAOTreasury",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 213,
        "contract": "contracts/CoreDAOTreasury.sol:CoreDAOTreasury",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/CoreDAOTreasury.sol:CoreDAOTreasury",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/CoreDAOTreasury.sol:CoreDAOTreasury",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 8587,
        "contract": "contracts/CoreDAOTreasury.sol:CoreDAOTreasury",
        "label": "coreDAO",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(ICOREDAO)8554"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ICOREDAO)8554": {
        "encoding": "inplace",
        "label": "contract ICOREDAO",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}